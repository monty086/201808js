

js中的报错机制
被动捕获报错
try{代码存放的地方}catch(e){e=>报错信息的内容}finally{不管报错与否都会执行}
主动
throw new Error
img.onerror // onclick

Array() //
new Array().slice// splice pop push
Array.form()
Array.of()

什么是dom映射
在js中通过dom提供的方法获取到的元素和页面中标签元素存在一一对应的关系，就叫做dom映射；
重绘和回流【重排】
重绘：当元素的样式【颜色，背景，字体】发生变化的时候，浏览器会重新渲染
回流：当元素删除或者增加，或者位置发生改变的时候，浏览器监听到元素发生回流，会重新计算并渲染，回流性能消耗更大；
dom树 =》 样式数=》 render
重绘和回流都会消耗性能，所以我们尽量减少对dom元素的操作
解决回流：我们可以利用文档碎片【将操作的元素都放入到文档碎片中】，也可以利用模板字符串，将操作的元素进行字符串拼接，最后在统一还给要操作的父级
解决重绘：读写分离，将要操作的样式放到一起进行操作，在新版的浏览器中，已经具备这种性能，代码从上到下执行的时候，会将样式统一收集，只有遇到不是操作样式的时候，浏览器再开始进行渲染。

js检测数据类型
1. typeof // 'string'
2. instanceof // 检测一个对象是否是一个类的实例 ，缺点：字面量创建的不是对象
3. constructor // null 和 undefined
4. Object.prototype.toString.call() // 通过call方法改变对象类上的toSting中的this，来达到检测相对应的数据类型

this
